'''
Q1
Build a multi-layer neural network using PyTorch. Use it to solve the XOR
classification problem generated by gen_xor.py. Visualize the decision
surface using matplotlib, with the training data overlaid as in Tensorflow
Playground.
'''
import gen_xor
import torch
from torch.autograd import Variable
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt

torch.manual_seed(2)

X, Y = gen_xor.gen_xor()


class XOR(nn.Module):
    def __init__(self, input_dim=2, output_dim=1):
        super(XOR, self).__init__()
        self.lin1 = nn.Linear(input_dim, 2)
        self.lin2 = nn.Linear(2, output_dim)
        self.weights_init()

    def forward(self, x):
        x = self.lin1(x)
        x = F.sigmoid(x)
        x = self.lin2(x)
        x = F.sigmoid(x)
        return x

    def weights_init(self):
        for m in self.modules():
            if isinstance(m, nn.Linear):
                # initialize the weight tensor, here we use a normal distribution
                m.weight.data.normal_(0, 1)

    def train(self, X, Y, epochs=2001):
        loss_func = nn.MSELoss()
        optimizer = optim.SGD(self.parameters(), lr=0.02, momentum=0.9)

        steps = X.size(0)
        for i in range(epochs):
            for j in range(steps):
                data_point = np.random.randint(X.size(0))
                x_var = Variable(X[data_point], requires_grad=False)
                y_var = Variable(Y[data_point], requires_grad=False)
                optimizer.zero_grad()
                y_hat = self(x_var)
                loss = loss_func.forward(y_hat, y_var)
                loss.backward()
                optimizer.step()

            if i % 500 == 0:
                print("Epoch: {0}, Loss: {1}, ".format(
                    i, loss.data.numpy()))
        model_params = list(self.parameters())
        model_weights = model_params[0].data.numpy()
        model_bias = model_params[1].data.numpy()
        plt.scatter(X[:, 0], X[:, 1], s=50)
        plt.scatter(X[:, 0], X[:, 1], c='red', s=50)

        x_1 = np.arange(-0.1, 1.1, 0.1)
        y_1 = ((x_1 * model_weights[0, 0]) +
               model_bias[0]) / (-model_weights[0, 1])
        plt.plot(x_1, y_1)

        x_2 = np.arange(-0.1, 1.1, 0.1)
        y_2 = ((x_2 * model_weights[1, 0]) +
               model_bias[1]) / (-model_weights[1, 1])
        plt.plot(x_2, y_2)
        plt.legend(["neuron_1", "neuron_2"], loc=8)
        plt.show()


X = torch.Tensor(X)
Y = torch.Tensor(Y)
net = XOR(2, 1)
net.train(X, Y)
'''
Q2
Implement a feed-forward neural network function from scratch. Extract the
learned weights from Q1 and run the model through your custom implementation.
Demonstrate that you get the same results.
Do not train the model yourself. Do not implement backpropagation. Just
run it forward using the PyTorch-trained weights.
'''


# X, Y = gen_xor.gen_xor()

# # scale units
# X = X/np.amax(X, axis=0)
# Y = Y/np.amax(Y, axis=0)


class neural_network(object):
    def __init__(self, input_size=2, output_size=1, hidden_size=2, W1=None, W2=None):
        # parameters
        self.input_size = input_size
        self.output_size = output_size
        self.hidden_size = hidden_size

        # weights
        if not W1.any() or not W2.any():
            print("NONE")
            # (2x2) weight matrix from input to hidden layer
            self.W1 = np.random.randn(self.input_size, self.hidden_size)
            # (2x1) weight matrix from hidden to output layer
            self.W2 = np.random.randn(self.hidden_size, self.output_size)
        else:
            self.W1 = W1
            self.W2 = W2

    def forward(self, X):
        # forward propagation through our network
        # dot product of X (input) and first set of 2x2 weights
        self.z = np.dot(X, self.W1)
        print(self.z)
        self.z2 = self.sigmoid(self.z)  # activation function
        print(self.z2)
        # dot product of hidden layer (z2) and second set of 2x1 weights
        self.z3 = np.dot(self.z2, self.W2)
        print(self.z3)
        o = self.sigmoid(self.z3)  # final activation function
        return o

    def sigmoid(self, s):
        # activation function
        return 1/(1+np.exp(-s))


# nn = neural_network(W1=np.array(
#     [[0.5, 0.5], [0.5, 0.5]]), W2=np.array([0.5, 0.5]))

# X = np.ones((2,))
# # defining our output
# o = nn.forward(X)

# print(o)
